{"ast":null,"code":"var _jsxFileName = \"/home/west/board/src/components/Board.jsx\";\n// Board.js\nimport React from 'react';\nimport Cell from './Cell';\nimport { DndProvider } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\nimport Piece from './Piece';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Board() {\n  const handlePieceDrop = (color, rowIndex, colIndex) => {\n    // Handle the drop event logic here, e.g., updating the position of the piece.\n    console.log(`Piece dropped at row ${rowIndex}, column ${colIndex} with color ${color}`);\n  };\n  return /*#__PURE__*/_jsxDEV(DndProvider, {\n    backend: HTML5Backend,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      children: Array(8).fill(null).map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board-row\",\n        children: Array(8).fill(null).map((col, colIndex) => {\n          const isDarkSquare = (rowIndex + colIndex) % 2 === 1;\n          const cellValue = `${rowIndex}${colIndex}`;\n\n          // Place black pieces at the top\n          if (rowIndex < 2 && colIndex % 3 === 0) {\n            return /*#__PURE__*/_jsxDEV(Cell, {\n              value: cellValue,\n              isDark: isDarkSquare,\n              rowIndex: rowIndex,\n              colIndex: colIndex,\n              onPieceDrop: handlePieceDrop,\n              children: /*#__PURE__*/_jsxDEV(Piece, {\n                color: \"black\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 27,\n                columnNumber: 21\n              }, this)\n            }, `${rowIndex}-${colIndex}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 26,\n              columnNumber: 19\n            }, this);\n          }\n\n          // Place white pieces at the bottom\n          if (rowIndex > 5 && colIndex % 3 === 0) {\n            return /*#__PURE__*/_jsxDEV(Cell, {\n              value: cellValue,\n              isDark: isDarkSquare,\n              rowIndex: rowIndex,\n              colIndex: colIndex,\n              onPieceDrop: handlePieceDrop,\n              children: /*#__PURE__*/_jsxDEV(Piece, {\n                color: \"white\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 36,\n                columnNumber: 21\n              }, this)\n            }, `${rowIndex}-${colIndex}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 35,\n              columnNumber: 19\n            }, this);\n          }\n          return /*#__PURE__*/_jsxDEV(Cell, {\n            value: cellValue,\n            isDark: isDarkSquare,\n            rowIndex: rowIndex,\n            colIndex: colIndex,\n            onPieceDrop: handlePieceDrop\n          }, `${rowIndex}-${colIndex}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 22\n          }, this);\n        })\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 5\n  }, this);\n}\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","Cell","DndProvider","HTML5Backend","Piece","jsxDEV","_jsxDEV","Board","handlePieceDrop","color","rowIndex","colIndex","console","log","backend","children","className","Array","fill","map","row","col","isDarkSquare","cellValue","value","isDark","onPieceDrop","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/west/board/src/components/Board.jsx"],"sourcesContent":["// Board.js\nimport React from 'react';\nimport Cell from './Cell';\nimport { DndProvider } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\nimport Piece from './Piece';\n\nfunction Board() {\n  const handlePieceDrop = (color, rowIndex, colIndex) => {\n    // Handle the drop event logic here, e.g., updating the position of the piece.\n    console.log(`Piece dropped at row ${rowIndex}, column ${colIndex} with color ${color}`);\n  };\n\n  return (\n    <DndProvider backend={HTML5Backend}>\n      <div className=\"board\">\n        {Array(8).fill(null).map((row, rowIndex) => (\n          <div key={rowIndex} className=\"board-row\">\n            {Array(8).fill(null).map((col, colIndex) => {\n              const isDarkSquare = (rowIndex + colIndex) % 2 === 1;\n              const cellValue = `${rowIndex}${colIndex}`;\n\n              // Place black pieces at the top\n              if (rowIndex < 2 && colIndex % 3 === 0) {\n                return (\n                  <Cell key={`${rowIndex}-${colIndex}`} value={cellValue} isDark={isDarkSquare} rowIndex={rowIndex} colIndex={colIndex} onPieceDrop={handlePieceDrop}>\n                    <Piece color=\"black\" />\n                  </Cell>\n                );\n              }\n\n              // Place white pieces at the bottom\n              if (rowIndex > 5 && colIndex % 3 === 0) {\n                return (\n                  <Cell key={`${rowIndex}-${colIndex}`} value={cellValue} isDark={isDarkSquare} rowIndex={rowIndex} colIndex={colIndex} onPieceDrop={handlePieceDrop}>\n                    <Piece color=\"white\" />\n                  </Cell>\n                );\n              }\n\n              return <Cell key={`${rowIndex}-${colIndex}`} value={cellValue} isDark={isDarkSquare} rowIndex={rowIndex} colIndex={colIndex} onPieceDrop={handlePieceDrop} />;\n            })}\n          </div>\n        ))}\n      </div>\n    </DndProvider>\n  );\n}\n\nexport default Board;\n\n\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}